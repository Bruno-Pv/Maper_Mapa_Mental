{
  "name": "JavaScript",
  "descricao": "JavaScript é uma linguagem de programação dinâmica, interpretada, amplamente usada para desenvolvimento web, tanto no front-end quanto no back-end.",
  "children": [
    {
      "name": "Fundamentos",
      "children": [
        {
          "name": "O que é JavaScript?",
          "descricao": "Linguagem de programação dinâmica que roda principalmente em navegadores para tornar páginas web interativas e dinâmicas.",
          "uso": "Criar páginas web interativas e dinâmicas."
        },
        {
          "name": "Sintaxe básica",
          "descricao": "Regras fundamentais para escrever código JavaScript corretamente, incluindo uso de ponto e vírgula, chaves e estrutura de comandos.",
          "uso": "Estruturar o código de forma clara e funcional."
        },
        {
          "name": "Variáveis e tipos de dados",
          "descricao": "Declaração de variáveis com var, let e const, e os principais tipos de dados: number, string, boolean, object, array, null e undefined.",
          "uso": "Armazenar e manipular dados."
        },
        {
          "name": "Operadores",
          "descricao": "Uso de operadores aritméticos (+, -, *, /), relacionais (==, ===, !=, !==), lógicos (&&, ||, !) e de atribuição (=, +=, -=).",
          "uso": "Realizar operações matemáticas, lógicas e atribuições."
        },
        {
          "name": "Entrada e saída",
          "descricao": "Interação básica com o usuário usando console.log() para saída e prompt() para entrada de dados em navegadores.",
          "uso": "Comunicar-se com o usuário e obter dados."
        },
        {
          "name": "Comentários",
          "descricao": "Inserção de comentários no código para documentação usando // para comentários de linha única e /* */ para blocos.",
          "uso": "Documentar e esclarecer o código."
        }
      ]
    },
    {
      "name": "Estruturas de Dados",
      "children": [
        {
          "name": "Arrays",
          "descricao": "Coleção ordenada de elementos que pode conter diferentes tipos de dados, acessada por índices numéricos.",
          "uso": "Armazenar listas de dados ordenados."
        },
        {
          "name": "Objetos",
          "descricao": "Estrutura que armazena pares chave-valor, representando entidades complexas com propriedades e métodos.",
          "uso": "Modelar entidades com atributos e comportamentos."
        },
        {
          "name": "Sets",
          "descricao": "Coleção de valores únicos, útil para eliminar duplicatas e realizar operações matemáticas de conjuntos.",
          "uso": "Gerenciar coleções sem elementos repetidos."
        },
        {
          "name": "Maps",
          "descricao": "Coleção de pares chave-valor onde as chaves podem ser de qualquer tipo, mantendo a ordem de inserção.",
          "uso": "Armazenar dados associados com chaves variadas."
        }
      ]
    },
    {
      "name": "Controle de Fluxo",
      "children": [
        {
          "name": "If / Else",
          "descricao": "Estrutura condicional que executa blocos de código diferentes dependendo do resultado de uma expressão booleana.",
          "uso": "Executar decisões condicionais."
        },
        {
          "name": "Switch",
          "descricao": "Estrutura para seleção entre múltiplas opções baseada no valor de uma expressão, substituindo múltiplos if-else.",
          "uso": "Simplificar múltiplas condições."
        },
        {
          "name": "For",
          "descricao": "Laço de repetição controlado por contador, usado para iterar um número definido de vezes.",
          "uso": "Repetir código com número fixo de iterações."
        },
        {
          "name": "While",
          "descricao": "Executa um bloco de código repetidamente enquanto a condição especificada for verdadeira.",
          "uso": "Repetir código enquanto uma condição for verdadeira."
        },
        {
          "name": "Do...While",
          "descricao": "Executa o bloco de código pelo menos uma vez e repete enquanto a condição for verdadeira.",
          "uso": "Garantir execução mínima antes da repetição condicional."
        },
        {
          "name": "Break / Continue",
          "descricao": "Controle do fluxo dentro de laços: break interrompe o laço, continue pula para a próxima iteração.",
          "uso": "Gerenciar fluxo de execução em loops."
        }
      ]
    },
    {
      "name": "Funções",
      "children": [
        {
          "name": "Declaração de funções",
          "descricao": "Criação de funções nomeadas usando a palavra-chave function, que agrupam código reutilizável.",
          "uso": "Organizar e reutilizar código."
        },
        {
          "name": "Funções anônimas",
          "descricao": "Funções sem nome, normalmente usadas como argumentos ou valores retornados.",
          "uso": "Passar comportamentos dinamicamente."
        },
        {
          "name": "Arrow functions",
          "descricao": "Sintaxe concisa para criar funções anônimas, com comportamento simplificado em relação ao this.",
          "uso": "Escrever funções de forma mais compacta."
        },
        {
          "name": "Parâmetros e retorno",
          "descricao": "Passagem de valores para funções através de parâmetros e uso da palavra-chave return para devolver resultados.",
          "uso": "Comunicar dados entre funções."
        },
        {
          "name": "Funções de callback",
          "descricao": "Funções passadas como argumentos para outras funções, geralmente para executar código após eventos ou operações assíncronas.",
          "uso": "Gerenciar operações assíncronas e eventos."
        }
      ]
    },
    {
      "name": "Programação Orientada a Objetos",
      "children": [
        {
          "name": "Classes e objetos",
          "descricao": "Definição de classes como moldes para criar objetos com atributos e métodos, facilitando a modelagem do sistema.",
          "uso": "Criar modelos reutilizáveis e estruturados."
        },
        {
          "name": "Atributos e métodos",
          "descricao": "Propriedades (dados) e funções (comportamentos) que definem o estado e ações de objetos.",
          "uso": "Definir estado e comportamento de objetos."
        },
        {
          "name": "Encapsulamento",
          "descricao": "Controle de acesso a dados internos do objeto, protegendo atributos e expondo métodos para manipulação segura.",
          "uso": "Proteger dados e controlar acesso."
        },
        {
          "name": "Herança",
          "descricao": "Mecanismo para criar classes derivadas que herdam características e comportamentos de outras classes.",
          "uso": "Reutilizar e estender funcionalidades."
        },
        {
          "name": "Polimorfismo",
          "descricao": "Capacidade de classes diferentes implementarem métodos com o mesmo nome, mas comportamentos distintos.",
          "uso": "Adaptar comportamento conforme o contexto."
        }
      ]
    },
    {
      "name": "Tratamento de Erros",
      "children": [
        {
          "name": "Try / Catch",
          "descricao": "Bloco para capturar e tratar exceções, prevenindo que erros interrompam o programa.",
          "uso": "Tratar erros em tempo de execução."
        },
        {
          "name": "Finally",
          "descricao": "Bloco que sempre executa após try/catch, usado para liberar recursos ou executar ações finais.",
          "uso": "Executar ações finais garantidas."
        },
        {
          "name": "Throw",
          "descricao": "Instrução para lançar exceções manualmente, criando erros personalizados durante a execução.",
          "uso": "Gerar erros personalizados."
        },
        {
          "name": "Exceções personalizadas",
          "descricao": "Definição de erros próprios para situações específicas, melhorando o controle e a clareza do tratamento de erros.",
          "uso": "Criar tipos específicos de erro."
        }
      ]
    },
    {
      "name": "Testes",
      "children": [
        {
          "name": "Testes unitários",
          "descricao": "Verificação automatizada de partes isoladas do código para garantir funcionamento correto.",
          "uso": "Garantir qualidade do código."
        },
        {
          "name": "Frameworks de teste",
          "descricao": "Ferramentas como Jest e Mocha que facilitam a criação, execução e organização de testes automatizados.",
          "uso": "Automatizar e organizar testes."
        },
        {
          "name": "Cobertura de testes",
          "descricao": "Medição de quais partes do código foram executadas pelos testes, indicando a qualidade da cobertura.",
          "uso": "Avaliar eficiência dos testes."
        }
      ]
    },
    {
      "name": "Bibliotecas e Frameworks",
      "children": [
        {
          "name": "React",
          "descricao": "Biblioteca para construção de interfaces de usuário reutilizáveis e reativas.",
          "uso": "Desenvolver interfaces interativas."
        },
        {
          "name": "Vue",
          "descricao": "Framework progressivo focado em criar interfaces interativas com curva de aprendizado suave.",
          "uso": "Criar interfaces reativas facilmente."
        },
        {
          "name": "Angular",
          "descricao": "Framework completo para desenvolvimento de aplicações web robustas e estruturadas.",
          "uso": "Construir aplicações web complexas."
        },
        {
          "name": "Node.js",
          "descricao": "Ambiente de execução JavaScript no servidor, permitindo aplicações back-end.",
          "uso": "Executar JavaScript no servidor."
        },
        {
          "name": "Express",
          "descricao": "Framework minimalista para construção de servidores web e APIs com Node.js.",
          "uso": "Criar APIs e servidores web."
        }
      ]
    },
    {
      "name": "Avançado",
      "children": [
        {
          "name": "Assíncrono e Promises",
          "descricao": "Manejo de operações assíncronas e tratamento de resultados futuros com objetos Promise.",
          "uso": "Gerenciar operações assíncronas."
        },
        {
          "name": "Async / Await",
          "descricao": "Sintaxe moderna que facilita o trabalho com código assíncrono, tornando-o mais legível e parecido com código síncrono.",
          "uso": "Escrever código assíncrono de forma clara."
        },
        {
          "name": "Destructuring",
          "descricao": "Extração simplificada de valores de arrays ou propriedades de objetos para variáveis individuais.",
          "uso": "Simplificar extração de dados."
        },
        {
          "name": "Modules",
          "descricao": "Importação e exportação de funcionalidades entre arquivos JavaScript, promovendo modularidade.",
          "uso": "Organizar código em módulos reutilizáveis."
        },
        {
          "name": "Decorators",
          "descricao": "Padrão para adicionar comportamentos a classes ou métodos sem modificar diretamente seu código original.",
          "uso": "Adicionar funcionalidades a classes/métodos."
        }
      ]
    }
  ]
}
