{
  "name": "Java",
  "descricao": "Java é uma linguagem de programação orientada a objetos, amplamente usada para desenvolver aplicações multiplataforma, incluindo sistemas corporativos, aplicativos Android e sistemas embarcados. A JVM (Java Virtual Machine) permite portabilidade entre diferentes sistemas operacionais.",
  "children": [
    {
      "name": "Fundamentos",
      "children": [
        {
          "name": "O que é Java?",
          "descricao": "Linguagem de programação orientada a objetos focada em portabilidade, segurança e desempenho, que roda na JVM para ser executada em várias plataformas.",
          "uso": "Compreender a base e propósito da linguagem Java."
        },
        {
          "name": "Sintaxe básica",
          "descricao": "Instruções terminam com ponto e vírgula; blocos de código são delimitados por chaves {}. A indentação melhora a legibilidade, embora não seja obrigatória.",
          "uso": "Escrever código Java correto e legível."
        },
        {
          "name": "Variáveis e tipos de dados",
          "descricao": "Java possui tipos primitivos (int, double, char, boolean) e tipos por referência como String. Variáveis devem ser declaradas com o tipo explicitamente.",
          "uso": "Declarar e manipular dados na aplicação."
        },
        {
          "name": "Operadores",
          "descricao": "Incluem operadores aritméticos (+, -, *, /, %), relacionais (==, !=, >, <, >=, <=), lógicos (&&, ||, !) e de atribuição (=, +=, -=, etc.).",
          "uso": "Realizar operações matemáticas, comparações e atribuições."
        },
        {
          "name": "Entrada e saída",
          "descricao": "Entrada de dados usando Scanner (ex: new Scanner(System.in)) e saída via System.out.print ou System.out.println.",
          "uso": "Interagir com o usuário ou sistema por meio de dados."
        },
        {
          "name": "Comentários",
          "descricao": "Comentários de uma linha com // e de múltiplas linhas com /* */ para documentação e clareza do código.",
          "uso": "Documentar o código para facilitar entendimento e manutenção."
        }
      ]
    },
    {
      "name": "Estruturas de Controle",
      "children": [
        {
          "name": "Condicionais",
          "descricao": "Estruturas if, else if, else para executar blocos de código com base em condições, além do switch para múltiplas alternativas.",
          "uso": "Tomar decisões no fluxo do programa."
        },
        {
          "name": "Laços de repetição",
          "descricao": "Laços for, while e do-while permitem repetir blocos de código; for é ideal quando se conhece o número de iterações, while e do-while para condições dinâmicas.",
          "uso": "Repetir ações até que uma condição seja satisfeita."
        }
      ]
    },
    {
      "name": "Funções e Métodos",
      "children": [
        {
          "name": "Definindo métodos",
          "descricao": "Métodos são funções definidas dentro de classes, podendo retornar valores ou serem void (sem retorno).",
          "uso": "Organizar e reutilizar código em unidades lógicas."
        },
        {
          "name": "Parâmetros e retorno",
          "descricao": "Métodos recebem parâmetros entre parênteses e retornam valores usando return.",
          "uso": "Comunicar dados entre métodos e controlar resultados."
        },
        {
          "name": "Sobrecarga de métodos",
          "descricao": "Permite criar múltiplos métodos com o mesmo nome, mas com diferentes tipos ou número de parâmetros.",
          "uso": "Implementar comportamentos flexíveis em métodos."
        }
      ]
    },
    {
      "name": "Programação Orientada a Objetos",
      "children": [
        {
          "name": "Classes e objetos",
          "descricao": "Classes são moldes para criar objetos que possuem atributos e métodos, representando entidades do mundo real.",
          "uso": "Modelar entidades e seus comportamentos no software."
        },
        {
          "name": "Encapsulamento",
          "descricao": "Controle de acesso a atributos e métodos usando modificadores private, protected e public para proteger dados internos.",
          "uso": "Proteger dados e controlar acesso dentro das classes."
        },
        {
          "name": "Herança",
          "descricao": "Permite que uma classe derive de outra, herdando seus atributos e métodos com a palavra-chave extends.",
          "uso": "Reutilizar código e criar hierarquias entre classes."
        },
        {
          "name": "Polimorfismo",
          "descricao": "Permite que métodos com o mesmo nome se comportem de forma diferente, suportando sobrecarga (mesmo método, parâmetros diferentes) e sobrescrita (subclasse redefine método da superclasse).",
          "uso": "Implementar comportamento variável em métodos similares."
        },
        {
          "name": "Abstração",
          "descricao": "Oculta detalhes da implementação usando classes abstratas ou interfaces, expondo apenas a funcionalidade essencial.",
          "uso": "Simplificar a complexidade expondo somente o necessário."
        }
      ]
    },
    {
      "name": "Tratamento de Erros",
      "children": [
        {
          "name": "Try / Catch / Finally",
          "descricao": "Estruturas para capturar exceções e tratar erros em tempo de execução, com finally para executar código independentemente de erro.",
          "uso": "Gerenciar erros e garantir execução segura do programa."
        },
        {
          "name": "Throw e Throws",
          "descricao": "throw lança manualmente uma exceção; throws declara que um método pode lançar uma exceção.",
          "uso": "Lançar e declarar exceções para controle de erros."
        },
        {
          "name": "Exceções personalizadas",
          "descricao": "Criação de classes de exceção específicas estendendo Exception para tratar erros particulares do sistema.",
          "uso": "Definir erros específicos para situações particulares."
        }
      ]
    },
    {
      "name": "Testes",
      "children": [
        {
          "name": "JUnit",
          "descricao": "Framework para escrever e executar testes unitários automatizados em Java, usando anotações como @Test.",
          "uso": "Garantir qualidade do código por meio de testes automáticos."
        },
        {
          "name": "Asserts",
          "descricao": "Métodos como assertEquals() verificam se os resultados esperados e obtidos são iguais durante testes.",
          "uso": "Validar resultados esperados nos testes."
        },
        {
          "name": "Cobertura de testes",
          "descricao": "Medição da porcentagem do código que foi executada durante os testes, com ferramentas como JaCoCo para geração de relatórios.",
          "uso": "Avaliar a eficácia dos testes realizados."
        }
      ]
    },
    {
      "name": "Bibliotecas Populares",
      "children": [
        {
          "name": "Gson",
          "descricao": "Biblioteca do Google para converter objetos Java para JSON e vice-versa, muito usada em APIs.",
          "uso": "Facilitar serialização e desserialização JSON."
        },
        {
          "name": "Jackson",
          "descricao": "Biblioteca eficiente para serialização e desserialização de objetos Java em JSON.",
          "uso": "Manipular JSON de forma eficiente em Java."
        },
        {
          "name": "JUnit",
          "descricao": "Biblioteca padrão para testes unitários em Java.",
          "uso": "Escrever e executar testes unitários."
        },
        {
          "name": "Apache Commons",
          "descricao": "Conjunto de utilitários para manipulação de strings, arquivos, coleções e outras funcionalidades comuns.",
          "uso": "Aprimorar funcionalidades comuns com utilitários prontos."
        }
      ]
    },
    {
      "name": "Avançado",
      "children": [
        {
          "name": "Streams e Lambda",
          "descricao": "API moderna para manipulação de coleções usando programação funcional e expressões lambda.",
          "uso": "Processar coleções de forma declarativa e eficiente."
        },
        {
          "name": "Generics",
          "descricao": "Permite criar classes e métodos que funcionam com qualquer tipo de dado, garantindo segurança de tipos em tempo de compilação.",
          "uso": "Garantir flexibilidade e segurança de tipos no código."
        },
        {
          "name": "Coleções",
          "descricao": "Estruturas como List, Set, Map e suas implementações (ArrayList, HashMap, etc.) para armazenar e manipular grupos de objetos.",
          "uso": "Armazenar e manipular grupos de dados dinamicamente."
        },
        {
          "name": "Threads e Concorrência",
          "descricao": "Execução simultânea de múltiplas tarefas para melhorar desempenho e reatividade da aplicação.",
          "uso": "Implementar multitarefa para melhor performance."
        },
        {
          "name": "Anotações (Annotations)",
          "descricao": "Metadados que modificam o comportamento do código, como @Override, @Deprecated e @Test.",
          "uso": "Adicionar informações e comportamentos extras ao código."
        }
      ]
    }
  ]
}
